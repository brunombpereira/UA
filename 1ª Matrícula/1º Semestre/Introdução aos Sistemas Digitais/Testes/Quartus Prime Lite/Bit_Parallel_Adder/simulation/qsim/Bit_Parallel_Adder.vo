// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "11/30/2022 09:24:59"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Bit_Parallel_Adder (
	S0,
	A0,
	B0,
	C,
	A1,
	B1,
	A2,
	B2,
	A3,
	B3,
	S1,
	S2,
	S3,
	C0);
output 	S0;
input 	A0;
input 	B0;
input 	C;
input 	A1;
input 	B1;
input 	A2;
input 	B2;
input 	A3;
input 	B3;
output 	S1;
output 	S2;
output 	S3;
output 	C0;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \S0~output_o ;
wire \S1~output_o ;
wire \S2~output_o ;
wire \S3~output_o ;
wire \C0~output_o ;
wire \A0~input_o ;
wire \B0~input_o ;
wire \C~input_o ;
wire \inst|Full_Adder_1|XOR2~0_combout ;
wire \B1~input_o ;
wire \A1~input_o ;
wire \inst|Full_Adder_1|OR2_2~0_combout ;
wire \inst|Full_Adder_2|XOR2~combout ;
wire \inst|Full_Adder_2|OR2_2~0_combout ;
wire \A2~input_o ;
wire \B2~input_o ;
wire \inst|Full_Adder_3|XOR2~combout ;
wire \inst|Full_Adder_3|OR2_2~0_combout ;
wire \A3~input_o ;
wire \B3~input_o ;
wire \inst|Full_Adder_4|XOR2~combout ;
wire \inst|Full_Adder_4|OR2_2~0_combout ;


cycloneive_io_obuf \S0~output (
	.i(\inst|Full_Adder_1|XOR2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S0~output_o ),
	.obar());
// synopsys translate_off
defparam \S0~output .bus_hold = "false";
defparam \S0~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S1~output (
	.i(\inst|Full_Adder_2|XOR2~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S1~output_o ),
	.obar());
// synopsys translate_off
defparam \S1~output .bus_hold = "false";
defparam \S1~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S2~output (
	.i(\inst|Full_Adder_3|XOR2~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S2~output_o ),
	.obar());
// synopsys translate_off
defparam \S2~output .bus_hold = "false";
defparam \S2~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \S3~output (
	.i(\inst|Full_Adder_4|XOR2~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S3~output_o ),
	.obar());
// synopsys translate_off
defparam \S3~output .bus_hold = "false";
defparam \S3~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \C0~output (
	.i(\inst|Full_Adder_4|OR2_2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\C0~output_o ),
	.obar());
// synopsys translate_off
defparam \C0~output .bus_hold = "false";
defparam \C0~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \A0~input (
	.i(A0),
	.ibar(gnd),
	.o(\A0~input_o ));
// synopsys translate_off
defparam \A0~input .bus_hold = "false";
defparam \A0~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B0~input (
	.i(B0),
	.ibar(gnd),
	.o(\B0~input_o ));
// synopsys translate_off
defparam \B0~input .bus_hold = "false";
defparam \B0~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \C~input (
	.i(C),
	.ibar(gnd),
	.o(\C~input_o ));
// synopsys translate_off
defparam \C~input .bus_hold = "false";
defparam \C~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_1|XOR2~0 (
// Equation(s):
// \inst|Full_Adder_1|XOR2~0_combout  = \A0~input_o  $ (\B0~input_o  $ (\C~input_o ))

	.dataa(\A0~input_o ),
	.datab(\B0~input_o ),
	.datac(\C~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_1|XOR2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_1|XOR2~0 .lut_mask = 16'h9696;
defparam \inst|Full_Adder_1|XOR2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \B1~input (
	.i(B1),
	.ibar(gnd),
	.o(\B1~input_o ));
// synopsys translate_off
defparam \B1~input .bus_hold = "false";
defparam \B1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A1~input (
	.i(A1),
	.ibar(gnd),
	.o(\A1~input_o ));
// synopsys translate_off
defparam \A1~input .bus_hold = "false";
defparam \A1~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_1|OR2_2~0 (
// Equation(s):
// \inst|Full_Adder_1|OR2_2~0_combout  = (\A0~input_o  & ((\B0~input_o ) # (\C~input_o ))) # (!\A0~input_o  & (\B0~input_o  & \C~input_o ))

	.dataa(\A0~input_o ),
	.datab(\B0~input_o ),
	.datac(\C~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_1|OR2_2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_1|OR2_2~0 .lut_mask = 16'hE8E8;
defparam \inst|Full_Adder_1|OR2_2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_2|XOR2 (
// Equation(s):
// \inst|Full_Adder_2|XOR2~combout  = \B1~input_o  $ (\A1~input_o  $ (\inst|Full_Adder_1|OR2_2~0_combout ))

	.dataa(\B1~input_o ),
	.datab(\A1~input_o ),
	.datac(\inst|Full_Adder_1|OR2_2~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_2|XOR2~combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_2|XOR2 .lut_mask = 16'h9696;
defparam \inst|Full_Adder_2|XOR2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_2|OR2_2~0 (
// Equation(s):
// \inst|Full_Adder_2|OR2_2~0_combout  = (\B1~input_o  & ((\A1~input_o ) # (\inst|Full_Adder_1|OR2_2~0_combout ))) # (!\B1~input_o  & (\A1~input_o  & \inst|Full_Adder_1|OR2_2~0_combout ))

	.dataa(\B1~input_o ),
	.datab(\A1~input_o ),
	.datac(\inst|Full_Adder_1|OR2_2~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_2|OR2_2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_2|OR2_2~0 .lut_mask = 16'hE8E8;
defparam \inst|Full_Adder_2|OR2_2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \A2~input (
	.i(A2),
	.ibar(gnd),
	.o(\A2~input_o ));
// synopsys translate_off
defparam \A2~input .bus_hold = "false";
defparam \A2~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B2~input (
	.i(B2),
	.ibar(gnd),
	.o(\B2~input_o ));
// synopsys translate_off
defparam \B2~input .bus_hold = "false";
defparam \B2~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_3|XOR2 (
// Equation(s):
// \inst|Full_Adder_3|XOR2~combout  = \inst|Full_Adder_2|OR2_2~0_combout  $ (\A2~input_o  $ (\B2~input_o ))

	.dataa(\inst|Full_Adder_2|OR2_2~0_combout ),
	.datab(\A2~input_o ),
	.datac(\B2~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_3|XOR2~combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_3|XOR2 .lut_mask = 16'h9696;
defparam \inst|Full_Adder_3|XOR2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_3|OR2_2~0 (
// Equation(s):
// \inst|Full_Adder_3|OR2_2~0_combout  = (\inst|Full_Adder_2|OR2_2~0_combout  & ((\A2~input_o ) # (\B2~input_o ))) # (!\inst|Full_Adder_2|OR2_2~0_combout  & (\A2~input_o  & \B2~input_o ))

	.dataa(\inst|Full_Adder_2|OR2_2~0_combout ),
	.datab(\A2~input_o ),
	.datac(\B2~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_3|OR2_2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_3|OR2_2~0 .lut_mask = 16'hE8E8;
defparam \inst|Full_Adder_3|OR2_2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \A3~input (
	.i(A3),
	.ibar(gnd),
	.o(\A3~input_o ));
// synopsys translate_off
defparam \A3~input .bus_hold = "false";
defparam \A3~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \B3~input (
	.i(B3),
	.ibar(gnd),
	.o(\B3~input_o ));
// synopsys translate_off
defparam \B3~input .bus_hold = "false";
defparam \B3~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_4|XOR2 (
// Equation(s):
// \inst|Full_Adder_4|XOR2~combout  = \inst|Full_Adder_3|OR2_2~0_combout  $ (\A3~input_o  $ (\B3~input_o ))

	.dataa(\inst|Full_Adder_3|OR2_2~0_combout ),
	.datab(\A3~input_o ),
	.datac(\B3~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_4|XOR2~combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_4|XOR2 .lut_mask = 16'h9696;
defparam \inst|Full_Adder_4|XOR2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|Full_Adder_4|OR2_2~0 (
// Equation(s):
// \inst|Full_Adder_4|OR2_2~0_combout  = (\inst|Full_Adder_3|OR2_2~0_combout  & ((\A3~input_o ) # (\B3~input_o ))) # (!\inst|Full_Adder_3|OR2_2~0_combout  & (\A3~input_o  & \B3~input_o ))

	.dataa(\inst|Full_Adder_3|OR2_2~0_combout ),
	.datab(\A3~input_o ),
	.datac(\B3~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst|Full_Adder_4|OR2_2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|Full_Adder_4|OR2_2~0 .lut_mask = 16'hE8E8;
defparam \inst|Full_Adder_4|OR2_2~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign S0 = \S0~output_o ;

assign S1 = \S1~output_o ;

assign S2 = \S2~output_o ;

assign S3 = \S3~output_o ;

assign C0 = \C0~output_o ;

endmodule
